import logging
import requests
from telegram import Update, KeyboardButton, ReplyKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, filters, CallbackContext

BOT_TOKEN = "*********************************"
WEATHER_API_KEY = "**************************************"
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
logger = logging.getLogger(__name__)


def get_weather(lat: float, lon: float) -> str:
    url = f"http://api.openweathermap.org/data/2.5/weather?lat={lat}&lon={lon}&appid={WEATHER_API_KEY}&units=metric&lang=ru"

    try:
        response = requests.get(url)
        data = response.json()

        if response.status_code == 200:
            city = data.get("name", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –º–µ—Å—Ç–æ")
            temp = data["main"]["temp"]
            weather_desc = data["weather"][0]["description"]

            if temp <= 0:
                return f"üìç –ì–æ—Ä–æ–¥: {city}\nüå° –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {int(temp) - 1}¬∞C\n‚ùÑÔ∏è –•–æ–ª–æ–¥–Ω–æ, –æ–¥–µ–≤–∞–π—Å—è —Ç–µ–ø–ª–µ–µ!\nüå• {weather_desc.capitalize()}"
            elif 0 < temp < 15:
                return f"üìç –ì–æ—Ä–æ–¥: {city}\nüå° –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {int(temp) + 1}¬∞C\n‚òÄÔ∏è –ü—Ä–æ—Ö–ª–∞–¥–Ω–æ, –Ω–æ –ø—Ä–∏—è—Ç–Ω–æ!\nüå• {weather_desc.capitalize()}"
            else:
                return f"üìç –ì–æ—Ä–æ–¥: {city}\nüå° –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {int(temp) + 1}¬∞C\nüî• –ñ–∞—Ä–∫–æ, –≤—ã—Ö–æ–¥–∏ –Ω–∞ –ø—Ä–æ–≥—É–ª–∫—É!\nüå• {weather_desc.capitalize()}"
        else:
            logger.error(f"–û—à–∏–±–∫–∞ API OpenWeather: {data}")
            return "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."

    except requests.RequestException as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ OpenWeather: {e}")
        return "–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º –ø–æ–≥–æ–¥—ã."


def get_weather_by_city(city: str) -> str:
    url = f"http://api.openweathermap.org/data/2.5/weather?q={city}&appid={WEATHER_API_KEY}&units=metric&lang=ru"

    try:
        response = requests.get(url)
        data = response.json()

        if response.status_code == 200:
            temp = data["main"]["temp"]
            weather_desc = data["weather"][0]["description"]
            if temp <= 0:
                return f"üìç–ì–æ—Ä–æ–¥ {city}\nüå° –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {int(temp) - 1}¬∞C\n‚ùÑÔ∏è –°–æ–≤–µ—Ç—É—é –æ–¥–µ—Ç—å—Å—è —Å–µ–≥–æ–¥–Ω—è –ø–æ—Ç–µ–ø–ª–µ–µ!\nüå• {weather_desc.capitalize()}"
            if 0 < temp < 15:
                return f"üìç–ì–æ—Ä–æ–¥ {city}\nüå° –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {int(temp) + 1}¬∞C\n‚òÄÔ∏è –°–µ–≥–æ–¥–Ω—è —Ö–æ—Ä–æ—à–∏–π —Ç–µ–ø–ª—ã–π –¥–µ–Ω—å!\nüå• {weather_desc.capitalize()}"
            else:
                return f"üìç–ì–æ—Ä–æ–¥ {city}\nüå° –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {int(temp) + 1}¬∞C\nüî• –°–µ–≥–æ–¥–Ω—è –∂–∞—Ä–∫–æ, –≤—Ä–µ–º—è –∏–¥—Ç–∏ –≥—É–ª—è—Ç—å!\nüå• {weather_desc.capitalize()}"

        else:
            return "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –≥–æ—Ä–æ–¥. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –Ω–∞–ø–∏—Å–∞–Ω–∏—è."

    except requests.RequestException as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ OpenWeather: {e}")
        return "–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º –ø–æ–≥–æ–¥—ã."


async def start(update: Update, context: CallbackContext) -> None:
    user = update.message.from_user
    first_name = user.first_name

    keyboard = [
        [KeyboardButton("üìç –û—Ç–ø—Ä–∞–≤–∏—Ç—å –ª–æ–∫–∞—Ü–∏—é", request_location=True)],
        [KeyboardButton("‚úèÔ∏è –í–≤–µ—Å—Ç–∏ –≥–æ—Ä–æ–¥")]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

    await update.message.reply_text(
        f"–ü—Ä–∏–≤–µ—Ç, {first_name}! –û—Ç–ø—Ä–∞–≤—å —Å–≤–æ—é –ª–æ–∫–∞—Ü–∏—é –∏–ª–∏ –≤–≤–µ–¥–∏ —Å–≤–æ–π –≥–æ—Ä–æ–¥, –∏ —è —Ä–∞—Å—Å–∫–∞–∂—É —Ç–µ–±–µ –æ –ø–æ–≥–æ–¥–µ.",
        reply_markup=reply_markup,
    )


async def request_city(update: Update, context: CallbackContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ '‚úèÔ∏è –í–≤–µ—Å—Ç–∏ –≥–æ—Ä–æ–¥'. –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –≤–≤–æ–¥ –≥–æ—Ä–æ–¥–∞."""
    context.user_data["waiting_for_city"] = True  # –ó–∞–ø–æ–º–∏–Ω–∞–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ö–æ—á–µ—Ç –≤–≤–µ—Å—Ç–∏ –≥–æ—Ä–æ–¥
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –ø–æ–≥–æ–¥—É:")


async def handle_city(update: Update, context: CallbackContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –≥–æ—Ä–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º."""
    if context.user_data.get("waiting_for_city"):  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±–æ—Ç –∂–¥–µ—Ç –≤–≤–æ–¥ –≥–æ—Ä–æ–¥–∞
        city = update.message.text
        weather_info = get_weather_by_city(city)
        context.user_data["waiting_for_city"] = False  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –æ–∂–∏–¥–∞–Ω–∏—è
        await update.message.reply_text(weather_info)
    else:
        await update.message.reply_text("–Ø –Ω–µ –ø–æ–Ω–∏–º–∞—é —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è.")


async def location(update: Update, context: CallbackContext) -> None:
    user_location = update.message.location
    if user_location:
        lat, lon = user_location.latitude, user_location.longitude
        weather_info = get_weather(lat, lon)
        await update.message.reply_text(weather_info)


def main() -> None:
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞."""
    app = Application.builder().token(BOT_TOKEN).build()

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π
    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & filters.Regex("‚úèÔ∏è –í–≤–µ—Å—Ç–∏ –≥–æ—Ä–æ–¥"), request_city))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_city))
    app.add_handler(MessageHandler(filters.LOCATION, location))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_city))
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –≥–æ—Ä–æ–¥–∞

    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    app.run_polling()


if __name__ == "__main__":
    main()
